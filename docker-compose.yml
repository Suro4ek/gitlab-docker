version: '3.7'

services:
    gitlab:
      image: ${DOCKER_IMAGE_GITLAB}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_GITLAB}
      restart: always
      depends_on:
        # - postgresql
        - redis
      ports:
        - "${GITLAB_SSH_PORT}:22"
        - 8081:80
#      labels:
#        - "traefik.enable=true"
#        - "traefik.http.routers.gitlab-rm-server.entrypoints=https"
#        - "traefik.http.routers.gitlab-rm-server.rule=Host(`${GITLAB_HOST}`)"
#        - "traefik.http.routers.gitlab-rm-server.tls=true"
#        - "traefik.http.routers.gitlab-rm-server.tls.certresolver=letsEncrypt"
#        - "traefik.http.services.gitlab-rm-server-service.loadbalancer.server.port=80"
#        - "traefik.docker.network=webproxy"
      volumes:
        - '${SERVICE_DATA}/${SERVICE_NAME}/config:/etc/gitlab'
        - '${SERVICE_DATA}/${SERVICE_NAME}/logs:/var/log/gitlab'
        - '${SERVICE_DATA}/${SERVICE_NAME}/data:/var/opt/gitlab'
        - ./ssl-certs:/certs
      environment:
        GITLAB_OMNIBUS_CONFIG: |
          external_url 'https://gitlab.hyneo.ru'
          registry_external_url 'https://registry.hyneo.ru'
          gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}
          gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
          gitlab_rails['smtp_enable'] = true
          gitlab_rails['smtp_address'] = '${SMTP_HOST}'
          gitlab_rails['smtp_port'] = ${SMTP_PORT}
          gitlab_rails['smtp_user_name'] = '${SMTP_USER}'
          gitlab_rails['smtp_password'] = '${SMTP_PASS}'
          gitlab_rails['smtp_domain'] = '${SMTP_DOMAIN}'
          gitlab_rails['smtp_authentication'] = 'login'
          gitlab_rails['smtp_enable_starttls_auto'] = false
          gitlab_rails['smtp_tls'] = false
          gitlab_rails['smtp_openssl_verify_mode'] = 'none'
          gitlab_rails['gitlab_email_from'] = '${GITLAB_EMAIL}'
          gitlab_rails['gitlab_email_reply_to'] = '${GITLAB_EMAIL_REPLY_TO}'
          redis['enable'] = true
          gitlab_rails['redis_host'] = '${SERVICE_NAME}_${CONTAINER_NAME_REDIS}'
          gitlab_rails['redis_port'] = 6379
          gitlab_rails['allowed_hosts'] = ['gitlab.hyneo.ru', '127.0.0.1']
          gitlab_rails['registry_api_url'] = 'https://registry.hyneo.ru/'
          gitlab_rails['registry_enabled'] = true
          gitlab_rails['registry_key_path'] = "/certs/registry.key"
          gitlab_rails['registry_issuer'] = "gitlab-issuer"
          gitlab_rails['registry_host'] = "registry.hyneo.ru"
          registry['internal_key'] = ${INTERNIAL_TOKEN}
          registry_nginx['ssl_certificate'] = "/certs/registry.crt"
          registry_nginx['ssl_certificate_key'] = "/certs/registry.key"
          registry['enable'] = false
          nginx['listen_https'] = false
          letsencrypt['enable'] = false
          nginx['listen_port'] = 80
          sidekiq['max_concurrency'] = 10
        # - GITLAB_REGISTRY_ENABLED=true
        # - GITLAB_REGISTRY_HOST=${REGISTRY_HOST}
        # - GITLAB_REGISTRY_API_URL=http://registry:5000/
        # - GITLAB_REGISTRY_KEY_PATH=/certs/registry.key
        # - DEBUG=false

        # - DB_ADAPTER=postgresql
        # - DB_HOST=${SERVICE_NAME}_${CONTAINER_NAME_PGSQL}
        # - DB_PORT=5432
        # - DB_USER=${DB_USER}
        # - DB_PASS=${DB_PASS}
        # - DB_NAME=${DB_NAME}

        # - REDIS_HOST=${SERVICE_NAME}_${CONTAINER_NAME_REDIS}
        # - REDIS_PORT=6379

        # - TZ=UTC
        # - GITLAB_TIMEZONE=${GITLAB_TIMEZONE}

        # - GITLAB_HTTPS=false
        # - SSL_SELF_SIGNED=false

        # - GITLAB_HOST=${GITLAB_HOST}
        # - GITLAB_PORT=80
        # - GITLAB_SSH_PORT=${GITLAB_SSH_PORT}
        # - GITLAB_SECRETS_DB_KEY_BASE=${GITLAB_SECRETS_DB_KEY_BASE}
        # - GITLAB_SECRETS_SECRET_KEY_BASE=${GITLAB_SECRETS_SECRET_KEY_BASE}
        # - GITLAB_SECRETS_OTP_KEY_BASE=${GITLAB_SECRETS_OTP_KEY_BASE}

        # - GITLAB_ROOT_PASSWORD=${GITLAB_ROOT_PASSWORD}
        # - GITLAB_ROOT_EMAIL=${GITLAB_ROOT_EMAIL}

        # - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true
        # - GITLAB_NOTIFY_PUSHER=false

        # - GITLAB_EMAIL=${GITLAB_EMAIL}
        # - GITLAB_EMAIL_REPLY_TO=${GITLAB_EMAIL_REPLY_TO}
        # - GITLAB_INCOMING_EMAIL_ADDRESS=${GITLAB_INCOMING_EMAIL_ADDRESS}

        # - GITLAB_PAGES_ENABLED=false

        # - SMTP_ENABLED=${SMTP_ENABLED}
        # - SMTP_DOMAIN=${SMTP_DOMAIN}
        # - SMTP_HOST=${SMTP_HOST}
        # - SMTP_PORT=${SMTP_PORT}
        # - SMTP_USER=${SMTP_USER}
        # - SMTP_PASS=${SMTP_PASS}
        # - SMTP_STARTTLS=${SMTP_STARTTLS}
        # - SMTP_AUTHENTICATION=${SMTP_AUTHENTICATION}

        # - IMAP_ENABLED=false

        # - LDAP_ENABLED=${LDAP_ENABLED}
        # - LDAP_LABEL=${LDAP_LABEL}
        # - LDAP_HOST=${LDAP_HOST}
        # - LDAP_PORT=${LDAP_PORT}
        # - LDAP_UID=${LDAP_UID}
        # - LDAP_METHOD=${LDAP_METHOD}
        # - LDAP_VERIFY_SSL=${LDAP_VERIFY_SSL}
        # - LDAP_ACTIVE_DIRECTORY=${LDAP_ACTIVE_DIRECTORY}
        # - LDAP_BASE=${LDAP_BASE}
        # - LDAP_USER_FILTER=${LDAP_USER_FILTER}
        # - LDAP_BIND_DN=${LDAP_BIND_DN}
        # - LDAP_PASS=${LDAP_PASS}


      healthcheck:
        test: ["CMD", "/usr/local/sbin/healthcheck"]
        interval: 1m
        timeout: 5s
        retries: 5
        start_period: 2m
      networks:
#        - ${WEBPROXY_NETWORK}
        - ${SERVICE_NETWORK}

    registry:
      image: ${DOCKER_IMAGE_REGISTRY}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_REGISTRY}
      restart: always
      expose:
          - "5000"
      ports:
        - 8083:5000
      volumes:
        - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab/shared/registry:/registry
        - ./ssl-certs:/certs
      environment:
#        - REGISTRY_AUTH_TOKEN_AUTOREDIRECT=false
        - REGISTRY_HTTP_SECRET=a0edab654bdb23e4245973da9f155407cbf454a50bece30d8c2627e77246c66d661e9eac6625b51a40befbe8ed852de504426b658d1dedf987d3e22a6c4e71f7
        - REGISTRY_LOG_LEVEL=info
        - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/registry
        - REGISTRY_AUTH_TOKEN_REALM=https://${GITLAB_HOST}/jwt/auth
        - REGISTRY_AUTH_TOKEN_SERVICE=container_registry
        - REGISTRY_AUTH_TOKEN_ISSUER=gitlab-issuer
        - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/certs/registry.crt
        - REGISTRY_STORAGE_DELETE_ENABLED=true
        # - REGISTRY_STORAGE=s3
        # - REGISTRY_STORAGE_S3_ACCESSKEY=${REGISTRY_STORAGE_S3_ACCESSKEY}
        # - REGISTRY_STORAGE_S3_SECRETKEY=${REGISTRY_STORAGE_S3_SECRETKEY}
        # - REGISTRY_STORAGE_S3_REGIONENDPOINT=${REGISTRY_STORAGE_S3_REGIONENDPOINT}
        # - REGISTRY_STORAGE_S3_REGION=${REGISTRY_STORAGE_S3_REGION}
        # - REGISTRY_STORAGE_S3_BUCKET=${REGISTRY_STORAGE_S3_BUCKET}
        # - REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=inmemory
      networks:
 #       - ${WEBPROXY_NETWORK}
        - ${SERVICE_NETWORK}

    # postgresql:
    #   image: ${DOCKER_IMAGE_PGSQL}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_PGSQL}
    #   restart: always
    #   environment:
    #     - DB_USER=${DB_USER}
    #     - DB_PASS=${DB_PASS}
    #     - DB_NAME=${DB_NAME}
    #     - DB_EXTENSION=pg_trgm,btree_gist
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/postgresql:/var/lib/postgresql:Z
    #   networks:
    #     - ${SERVICE_NETWORK}

    redis:
      restart: always
      image: ${DOCKER_IMAGE_REDIS}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_REDIS}
      command:
        - --loglevel warning
      volumes:
        - ${SERVICE_DATA}/${SERVICE_NAME}/redis:/var/lib/redis:Z
      networks:
        - ${SERVICE_NETWORK}

    runner_1:
      image: ${DOCKER_IMAGE_RUNNER}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_1
      restart: always
      depends_on:
        - gitlab
      volumes:
        - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_1:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock
      command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
      # environment:
      #   - CI_SERVER_URL=http://${GITLAB_HOST}
      #   - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
      #   - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
      #   - RUNNER_TOKEN=${RUNNER_TOKEN}
      #   - RUNNER_DESCRIPTION=gitab-runner_1
      #   - RUNNER_EXECUTOR=docker
      #   - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
      networks:
        - ${SERVICE_NETWORK}
    # register_runner_1:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_register_1
    #   restart: 'no'
    #   environment:
    #     - CI_SERVER_URL=https://${GITLAB_HOST}
    #     - REGISTRATION_TOKEN=${RUNNER_TOKEN}
    #     - RUNNER_NAME=gitab-runner_1
    #   command:
    #     - register 
    #     - --non-interactive
    #     - --run-untagged
    #     - --locked=false
    #     - --registration-token=${RUNNER_TOKEN}
    #     - --url=https://${GITLAB_HOST}
    #     - --clone-url=https://${GITLAB_HOST}
    #     - --name=gitab-runner_1
    #     - --executor=docker
    #     - --docker-image=alpine
    #     - --docker-privileged=true
    #     - --docker-volumes=/var/run/docker.sock:/var/run/docker.sock
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_1:/etc/gitlab-runner
    #   networks:
    #     - ${SERVICE_NETWORK}
    runner_2:
      image: ${DOCKER_IMAGE_RUNNER}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_2
      restart: always
      depends_on:
        - gitlab
      volumes:
        - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_2:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock
      command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
      # environment:
      #   - CI_SERVER_URL=http://${GITLAB_HOST}
      #   - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
      #   - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
      #   - RUNNER_TOKEN=${RUNNER_TOKEN}
      #   - RUNNER_DESCRIPTION=gitab-runner_1
      #   - RUNNER_EXECUTOR=docker
      #   - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
      networks:
        - ${SERVICE_NETWORK}
    # register_runner_2:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_register_2
    #   restart: 'no'
    #   command:
    #     - register 
    #     - --non-interactive
    #     - --run-untagged
    #     - --locked=false
    #     - --registration-token=${RUNNER_TOKEN}
    #     - --url=https://${GITLAB_HOST}
    #     - --clone-url=https://${GITLAB_HOST}
    #     - --name=gitab-runner_2
    #     - --executor=docker
    #     - --docker-image=alpine
    #     - --docker-privileged=true
    #     - --docker-volumes=/var/run/docker.sock:/var/run/docker.sock
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_2:/etc/gitlab-runner
    #   networks:
    #     - ${SERVICE_NETWORK}
    runner_3:
      image: ${DOCKER_IMAGE_RUNNER}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_3
      restart: always
      depends_on:
        - gitlab
      volumes:
        - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_3:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock
      command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
      # environment:
      #   - CI_SERVER_URL=http://${GITLAB_HOST}
      #   - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
      #   - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
      #   - RUNNER_TOKEN=${RUNNER_TOKEN}
      #   - RUNNER_DESCRIPTION=gitab-runner_1
      #   - RUNNER_EXECUTOR=docker
      #   - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
      networks:
        - ${SERVICE_NETWORK}
    # register_runner_3:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_register_3
    #   restart: 'no'
    #   command:
    #     - register 
    #     - --non-interactive
    #     - --run-untagged
    #     - --locked=false
    #     - --registration-token=${RUNNER_TOKEN}
    #     - --url=https://${GITLAB_HOST}
    #     - --clone-url=https://${GITLAB_HOST}
    #     - --name=gitab-runner_3
    #     - --executor=docker
    #     - --docker-image=alpine
    #     - --docker-privileged=true
    #     - --docker-volumes=/var/run/docker.sock:/var/run/docker.sock
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_3:/etc/gitlab-runner
    #   networks:
    #     - ${SERVICE_NETWORK}
    runner_4:
      image: ${DOCKER_IMAGE_RUNNER}
      container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_4
      restart: always
      depends_on:
        - gitlab
      volumes:
        - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_4:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock
      command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
      # environment:
      #   - CI_SERVER_URL=http://${GITLAB_HOST}
      #   - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
      #   - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
      #   - RUNNER_TOKEN=${RUNNER_TOKEN}
      #   - RUNNER_DESCRIPTION=gitab-runner_1
      #   - RUNNER_EXECUTOR=docker
      #   - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
      networks:
        - ${SERVICE_NETWORK}
    # register_runner_4:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_register_4
    #   restart: 'no'
    #   command:
    #     - register 
    #     - --non-interactive
    #     - --run-untagged
    #     - --locked=false
    #     - --registration-token=${RUNNER_TOKEN}
    #     - --url=https://${GITLAB_HOST}
    #     - --clone-url=https://${GITLAB_HOST}
    #     - --name=gitab-runner_4
    #     - --executor=docker
    #     - --docker-image=alpine
    #     - --docker-privileged=true
    #     - --docker-volumes=/var/run/docker.sock:/var/run/docker.sock
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_4:/etc/gitlab-runner
    #   networks:
    #     - ${SERVICE_NETWORK} 
    # runner_2:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_2
    #   restart: always
    #   depends_on:
    #     - gitlab
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_2:/etc/gitlab-runner
    #     - /var/run/docker.sock:/var/run/docker.sock
    #   command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
    #   environment:
    #     - CI_SERVER_URL=https://${GITLAB_HOST}
    #     - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
    #     - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
    #     - RUNNER_TOKEN=${RUNNER_TOKEN}
    #     - RUNNER_DESCRIPTION=gitab-runner_2
    #     - RUNNER_EXECUTOR=docker
    #     - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
    #   networks:
    #     - ${SERVICE_NETWORK}

    # runner_3:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_3
    #   restart: always
    #   depends_on:
    #     - gitlab
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_3:/etc/gitlab-runner
    #     - /var/run/docker.sock:/var/run/docker.sock
    #   command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
    #   environment:
    #     - CI_SERVER_URL=https://${GITLAB_HOST}
    #     - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
    #     - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
    #     - RUNNER_TOKEN=${RUNNER_TOKEN}
    #     - RUNNER_DESCRIPTION=gitab-runner_3
    #     - RUNNER_EXECUTOR=docker
    #     - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
    #   networks:
    #     - ${SERVICE_NETWORK}

    # runner_4:
    #   image: ${DOCKER_IMAGE_RUNNER}
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_RUNNER}_4
    #   restart: always
    #   depends_on:
    #     - gitlab
    #   volumes:
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab-runner_4:/etc/gitlab-runner
    #     - /var/run/docker.sock:/var/run/docker.sock
    #   command: --debug run --user=gitlab-runner --working-directory=/home/gitlab-runner
    #   environment:
    #     - CI_SERVER_URL=https://${GITLAB_HOST}
    #     - CI_SERVER_WITH_RUNNER=${CI_SERVER_WITH_RUNNER}
    #     - CI_SERVER_LOCAL_IP=${CI_SERVER_LOCAL_IP}
    #     - RUNNER_TOKEN=${RUNNER_TOKEN}
    #     - RUNNER_DESCRIPTION=gitab-runner_4
    #     - RUNNER_EXECUTOR=docker
    #     - DOCKER_IMAGE=gitlab/gitlab-runner-helper:x86_64-latest
    #   networks:
    #    - ${SERVICE_NETWORK}

    # backup:
    #   image: ${DOCKER_IMAGE_BACKUP}
    #   restart: always
    #   container_name: ${SERVICE_NAME}_${CONTAINER_NAME_BACKUP}
    #   command: gitlab backup --storage S3://<BACKBLAZE-MOUNT-POINT>/gitlab --online
    #   volumes:
    #     - /var/run/docker.sock:/var/run/docker.sock
    #     - ${SERVICE_DATA}/${SERVICE_NAME}/gitlab/backups:${BACKUP_DIR}:Z
    #     - ${DOCKER_COMPOSE_DIR}:${DOCKER_COMPOSE_DIR}
    #   environment:
    #     - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
    #     - BACKUP_DIR=${BACKUP_DIR}
    #     - DOCKER_COMPOSE_DIR=${DOCKER_COMPOSE_DIR}
    #     - ${SERVICE_NETWORK}
    #     - CONTAINER_NAME_GITLAB=${CONTAINER_NAME_GITLAB}
    #     - S3_HOST_BASE=${S3_HOST_BASE}
    #     - S3_ACCOUNT_ID=${S3_ACCOUNT_ID}
    #     - S3_APPLICATION_KEY=${S3_APPLICATION_KEY}
    #   networks:
    #     - ${SERVICE_NETWORK}

networks:
    service:
        name: ${SERVICE_NETWORK}
#    webproxy:
#        external:
#            name: ${WEBPROXY_NETWORK}
